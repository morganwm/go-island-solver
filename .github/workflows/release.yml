on:
  release:
    types: [published]
name: Upload Release Asset
jobs:
  release:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.x
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build binaries
        run: |
          VERSION="$(git describe --tags)"
          function build_solver() {
            DIR="$(mktemp -d)"
            mkdir "$DIR/go-island-solver"
            NAME="go-island-solver"
            if [ "$GOOS" == "windows" ]; then
              NAME=$NAME.exe
            fi
            go build -o $DIR/go-island-solver/$NAME -ldflags "-X main.Version=$(git describe --tags)"
            if [ "$GOOS" == "windows" ]; then
              ( cd "$DIR"; zip go-island-solver.zip -r go-island-solver )
              mv "$DIR/go-island-solver.zip" "go-island-solver-$VERSION-$GOOS-$GOARCH.zip"
            else
              tar -cvzf "go-island-solver-$VERSION-$GOOS-$GOARCH.tar.gz" -C "$DIR" go-island-solver
            fi
          }
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} build_solver
      - name: Upload release artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs").promises;
            const { repo: { owner, repo }, sha } = context;

            const release = await github.rest.repos.getReleaseByTag({
              owner, repo,
              tag: process.env.GITHUB_REF.replace("refs/tags/", ""),
            });
            console.log("Release:", { release });

            for (let file of await fs.readdir(".")) {
              if (!file.startsWith("go-island-solver-")) continue;
              console.log("Uploading", file);
              await github.rest.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(file),
              });            
            }
